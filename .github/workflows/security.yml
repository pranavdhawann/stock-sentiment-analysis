name: 🔒 Security Audit

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: 📦 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: 🔍 Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json
          bandit -r . -f txt

      - name: 🛡️ Check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json
          safety check

      - name: 🔬 Run Semgrep SAST scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json .
          semgrep --config=auto .

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

      - name: 🚨 Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read security reports
            let banditFindings = [];
            let safetyFindings = [];
            
            try {
              const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              banditFindings = banditReport.results || [];
            } catch (e) {
              console.log('No bandit report found');
            }
            
            try {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              safetyFindings = safetyReport || [];
            } catch (e) {
              console.log('No safety report found');
            }
            
            // Create comment
            let comment = '## 🔒 Security Audit Results\n\n';
            
            if (banditFindings.length > 0) {
              comment += '### 🚨 Bandit Security Issues\n';
              banditFindings.forEach(finding => {
                comment += `- **${finding.severity.toUpperCase()}**: ${finding.issue_text} (${finding.filename}:${finding.line_number})\n`;
              });
              comment += '\n';
            }
            
            if (safetyFindings.length > 0) {
              comment += '### 🛡️ Dependency Vulnerabilities\n';
              safetyFindings.forEach(finding => {
                comment += `- **${finding.package}**: ${finding.advisory}\n`;
              });
              comment += '\n';
            }
            
            if (banditFindings.length === 0 && safetyFindings.length === 0) {
              comment += '✅ No security issues found!\n';
            }
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-scan:
    name: 📦 Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Scan dependencies with pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit

      - name: 📊 Upload dependency scan report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-report
          path: pip-audit-report.json

  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Build Docker image
        run: docker build -t stock-sentiment-analysis:security-scan .

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'stock-sentiment-analysis:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: stock-sentiment-analysis:security-scan
          args: --severity-threshold=high

  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 Run GitLeaks secrets scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  license-compliance:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📄 Check license compliance
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses

      - name: 📊 Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-compliance-report
          path: licenses.json
