name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt

      - name: 🎨 Code formatting check (Black)
        run: black --check --diff .

      - name: 📋 Import sorting check (isort)
        run: isort --check-only --diff .

      - name: 🔍 Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🔬 Type checking (mypy)
        run: mypy . --ignore-missing-imports || true

  # Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🔍 Security scan with bandit
        run: bandit -r . -f json -o bandit-report.json || true

      - name: 🛡️ Dependency vulnerability scan
        run: safety check --json --output safety-report.json || true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Testing
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: 🧪 Run tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest-report.xml

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📈 Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-report.xml
            htmlcov/

  # Build and Test Docker
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: stock-sentiment-analysis:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          docker run --rm -d -p 8080:8080 --name test-container stock-sentiment-analysis:latest
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          docker stop test-container

  # Performance Testing
  performance:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Start application
        run: |
          docker run --rm -d -p 8080:8080 --name perf-test stock-sentiment-analysis:latest
          sleep 15

      - name: ⚡ Run performance tests
        run: |
          # Install Apache Bench
          sudo apt-get update && sudo apt-get install -y apache2-utils
          
          # Test API endpoints
          ab -n 100 -c 10 http://localhost:8080/health
          ab -n 50 -c 5 "http://localhost:8080/api/search_stocks?q=AAPL"
          
          # Test main page
          ab -n 100 -c 10 http://localhost:8080/

      - name: 🧹 Cleanup
        run: docker stop perf-test

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, security, test, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 🚀 Deploy to App Engine (Staging)
        run: |
          gcloud app deploy app.yaml --version=staging --no-promote

  # Deploy to Production (on main branch)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, security, test, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 🚀 Deploy to App Engine (Production)
        run: |
          gcloud app deploy app.yaml --version=prod --promote

      - name: 📢 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Dependency Updates
  dependency-update:
    name: 📦 Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Check for dependency updates
        run: |
          pip install pip-review
          pip-review --local --auto

      - name: 📝 Create PR for updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated dependency updates'
          body: 'This PR contains automated dependency updates.'
          branch: dependency-updates
